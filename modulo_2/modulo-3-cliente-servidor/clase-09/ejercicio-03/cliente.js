// ### üéØ DESAF√çO 3: Cliente con Timeout y Destrucci√≥n de Conexi√≥n ‚è≥‚ùå
// **üìå Objetivo:** Implementar un **timeout** que cierre la conexi√≥n si no recibe datos en 10 segundos.

// **üî∑ El cliente debe:**
// ‚úÖ Conectarse y enviar un mensaje inicial.
// ‚úÖ Configurar un `setTimeout()` de 10 segundos para cerrar la conexi√≥n si no recibe datos.
// ‚úÖ Escuchar el evento `'data'` y cancelar el timeout si recibe informaci√≥n.
// ‚úÖ Si no recibe datos en 10 segundos, usar `client.destroy()` y mostrar un mensaje en consola.

// Importa el m√≥dulo 'net' para crear clientes y servidores TCP.
const net = require('net');

// Define el puerto al que el cliente se va a conectar.
const PORT = 5000;

// Crea un cliente que intentar√° conectarse al puerto 5000.
const client = net.createConnection({ port: PORT });

// Este bloque se ejecuta una vez que la conexi√≥n con el servidor es exitosa.
client.on('connect', () => {
    // Muestra un mensaje en la consola para confirmar la conexi√≥n.
    console.log(`Conectado al servidor`);

    // Establece un temporizador de inactividad de 10 segundos (10000 milisegundos).
    // Si no se recibe ni env√≠a nada durante este tiempo, se activar√° el evento 'timeout'.
    client.setTimeout(10000);

    // Env√≠a un mensaje al servidor justo despu√©s de conectarse.
    client.write(`Hola Servidor...`);
});

// Este bloque se ejecuta si se cumple el tiempo de inactividad (10 segundos).
client.on('timeout', () => {
    // Muestra un mensaje explicando por qu√© se va a cerrar la conexi√≥n.
    console.log('Timeout de inactividad alcanzado. Destruyendo la conexi√≥n.');

    // Cierra la conexi√≥n de forma abrupta y genera un error para indicar la causa.
    client.destroy(new Error('Timeout de inactividad'));
});

// Este bloque se ejecuta cada vez que llegan datos desde el servidor.
client.on('data', (data) => {
    // Muestra en la consola los datos recibidos, convirti√©ndolos a texto.
    console.log(`Datos recibidos: ${data.toString()}`);
})
