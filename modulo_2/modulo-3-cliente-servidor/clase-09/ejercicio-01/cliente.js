// ### üéØ DESAF√çO 1: Cliente con Reconexi√≥n Autom√°tica üîÑ
// **üìå Objetivo:** Crear un cliente TCP que se conecte a un servidor, pero si la conexi√≥n se pierde, debe **intentarlo nuevamente cada 3 segundos**.

// **üî∑ El cliente debe:**
// ‚úÖ Conectarse al servidor en el puerto 5000.
// ‚úÖ Enviar un mensaje inicial: "¬°Hola, servidor!".
// ‚úÖ Escuchar el evento `'close'` y volver a conectarse tras 3 segundos.
// ‚úÖ Escuchar y manejar `'error'`, mostrando el mensaje en consola.


// Importa el m√≥dulo 'net' de Node.js. Este m√≥dulo contiene las herramientas necesarias para crear clientes y servidores de red que se comunican a trav√©s del protocolo TCP.
const net = require('net');

// Define una constante llamada PORT y le asigna el valor 5000.
// Aqu√≠ es donde se guardar√° el n√∫mero de puerto al que el cliente intentar√° conectarse.
const PORT = 5000;

// Utiliza la funci√≥n 'createConnection' del m√≥dulo 'net' para crear un cliente TCP.
// Se le pasa un objeto que especifica el puerto (PORT) al que debe conectarse.
// Este cliente intentar√° conectarse a un servidor en la misma m√°quina (localhost) en el puerto 5000.
const client = net.createConnection({ port: PORT });

// Se define una funci√≥n llamada 'conectar'. Esta funci√≥n contiene la l√≥gica para manejar el evento de conexi√≥n.
const conectar = () => {
    // 'client.on' es un "escuchador de eventos". Aqu√≠, le decimos al cliente que est√© atento al evento 'connect'. Este evento se dispara cuando la conexi√≥n con el servidor se ha establecido con √©xito.
    client.on('connect', () => {
        // Cuando la conexi√≥n es exitosa, se muestra un mensaje en la consola.
        console.log(`Conectando al servidor`);
        // Despu√©s de conectarse, el cliente usa el m√©todo 'write' para enviar un mensaje de texto al servidor.
        client.write(`¬°Hola, servidor!`)
    })
}

// Aqu√≠, el cliente escucha el evento 'data'. Este evento se activa cada vez que se reciben datos desde el servidor.
client.on('data', (data) => {
    // Cuando se reciben datos, se muestran en la consola. 'data.toString()' convierte los datos recibidos (que est√°n en formato binario) a texto legible.
    console.log(`Datos recibidos del servidor: ${data.toString()}`);
})

// El cliente escucha el evento 'close'. Este evento se dispara si la conexi√≥n con el servidor se cierra por cualquier motivo.
client.on('close', () => {
    // Muestra un mensaje en la consola indicando que la conexi√≥n se ha cerrado.
    console.log(`La conexi√≥n se ha cerrado... Reintentando... `);
    // 'setTimeout' es una funci√≥n que espera un tiempo determinado (en milisegundos) antes de ejecutar una funci√≥n. Aqu√≠, espera 3000 milisegundos (3 segundos) y luego vuelve a llamar a la funci√≥n 'conectar' para intentar reconectarse.
    setTimeout(conectar,3000);
})

// El cliente escucha el evento 'error'. Este evento se activa si ocurre alg√∫n error en la conexi√≥n (por ejemplo, si no se puede conectar al servidor).
client.on('error', (err) => {
    // Si ocurre un error, se muestra el mensaje de error en la consola.
    console.error(`Error: ${err.message}`);
})

// Finalmente, se llama a la funci√≥n 'conectar' por primera vez para iniciar el proceso de conexi√≥n con el servidor.
conectar();


