// ### üéØ DESAF√çO 2: Cliente con Pausa y Reanudaci√≥n de Datos ‚èØÔ∏è
// **üìå Objetivo:** Simular un cliente que **pausa la recepci√≥n de datos por 5 segundos** y luego la reanuda.

// **üî∑ El cliente debe:**
// ‚úÖ Conectarse al servidor y enviar un mensaje inicial.
// ‚úÖ Escuchar el evento `'data'` y mostrar los datos en consola.
// ‚úÖ Pausar la recepci√≥n de datos usando `client.pause()` a los 3 segundos.
// ‚úÖ Reanudar la recepci√≥n de datos con `client.resume()` a los 8 segundos.
// ‚úÖ Finalizar la conexi√≥n tras 15 segundos.

// Importa el m√≥dulo 'net' para poder usar funciones de red TCP.
const net = require('net');

// Guarda el n√∫mero de puerto (5000) en una constante para la conexi√≥n.
const PORT = 5000;

// Crea un cliente que intentar√° conectarse al servidor en el puerto definido.
const client = net.createConnection({port: PORT});

// Se ejecuta cuando la conexi√≥n con el servidor es exitosa.
client.on('connect', () => {
    // Muestra un mensaje en la consola confirmando la conexi√≥n.
    console.log(`Conectando con el servidor...`)
    // Env√≠a el mensaje "Hola Servidor..." al servidor.
    client.write(`Hola Servidor...`);
});

// Se ejecuta cada vez que se reciben datos desde el servidor.
client.on('data', (data) => {
    // Muestra en la consola los datos recibidos, convirti√©ndolos a texto.
    console.log(`Datos recibidos desde el servidor: ${data.toString()}`);
});

// Espera 3 segundos (3000 milisegundos) despu√©s de iniciar el programa.
setTimeout(()=> {
    // Muestra un mensaje indicando que se pausar√° la recepci√≥n.
    console.log(`Pausando la recepci√≥n de datos.`);
    // Pausa la lectura de datos del servidor. No se procesar√° ning√∫n evento 'data'.
    client.pause();
},3000);

// Espera 8 segundos (8000 milisegundos) desde el inicio.
setTimeout(() => {
    // Muestra un mensaje indicando que se reanudar√° la recepci√≥n.
    console.log(`Reanudando la recepci√≥n de datos.`);
    // Reanuda la lectura de datos del servidor. Los eventos 'data' volver√°n a funcionar.
    client.resume();
},8000);

// Espera 15 segundos (15000 milisegundos) desde el inicio.
setTimeout(() => {
    // Muestra un mensaje indicando que la conexi√≥n se va a cerrar.
    console.log(`Cerrando conexi√≥n...`);
    // Cierra la conexi√≥n con el servidor de forma ordenada.
    client.end();
},15000);