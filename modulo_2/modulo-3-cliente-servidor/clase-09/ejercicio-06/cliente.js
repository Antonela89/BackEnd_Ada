// ### üéØ DESAF√çO 6: Cliente con Control Inteligente de Reintentos y M√°ximo de Fallos ü§ñ‚ö†Ô∏è
// **üìå Objetivo:** Crear un cliente TCP que intente reconectarse si la conexi√≥n se pierde, pero que **abandone despu√©s de 5 intentos fallidos**.

// **üî∑ El cliente debe:**
// ‚úÖ Intentar conectarse al servidor.
// ‚úÖ Si se desconecta, volver a intentar cada 2 segundos.
// ‚úÖ Llevar un contador de intentos fallidos.
// ‚úÖ Si llega a 5 intentos fallidos, **terminar el proceso** con un mensaje de error.
// ‚úÖ Manejar adecuadamente los eventos `'error'`, `'close'` y `'data'`.

// **üí° PISTA:** Usen un contador global de intentos y un `setTimeout()` para gestionar los reintentos.

// Importa el m√≥dulo 'net' para poder usar funciones de red TCP.
const net = require('net');

// --- CONFIGURACI√ìN ---
// Define el puerto al que nos intentaremos conectar.
const PORT = 5000;
// Define el n√∫mero m√°ximo de veces que intentaremos reconectarnos.
const MAX_INTENTOS = 5;
// Define el tiempo de espera (en milisegundos) entre cada intento.
const DELAY_REINTENTO = 2000; // 2 segundos

// Variable para contar cu√°ntos intentos de conexi√≥n fallidos llevamos.
let intentos = 0;

// Crea el objeto cliente, pero a√∫n no se conecta.
// Se le pasa el puerto por defecto, pero la conexi√≥n real se inicia con client.connect().
const client = net.createConnection({ port: PORT });

// --- FUNCIONES ---
// Esta funci√≥n encapsula la l√≥gica para intentar conectarse.
function conectar() {
    console.log(`\n--- Intento de conexi√≥n #${intentos + 1} ---`);
    // Inicia el intento de conexi√≥n al servidor en el puerto especificado.
    // Si falla, se disparar√° el evento 'error'.
    client.connect(PORT);
}

// --- MANEJO DE EVENTOS DEL CLIENTE ---

// Evento 'connect': Se dispara solo cuando la conexi√≥n es exitosa.
client.on('connect', () => {
    console.log(`‚úÖ Conectado exitosamente con el servidor`);
    // Si la conexi√≥n fue exitosa, reiniciamos el contador de intentos.
    intentos = 0;
    // Enviamos un saludo al servidor.
    client.write(`Hola Servidor...`)
});

// Evento 'data': Se dispara cada vez que se reciben datos del servidor.
client.on('data', (data) => {
    console.log(`Datos recibidos: ${data.toString()}`);
});

// Evento 'error': Se dispara si la conexi√≥n falla o si ocurre otro error.
client.on('error', (err) => {
    console.error(`Error: ${err.message}`);

    // Incrementamos el contador de intentos fallidos.
    intentos++;

    // Comprobamos si hemos superado el l√≠mite de intentos.
    if (intentos >= MAX_INTENTOS) {
        console.error(`üö´ Se alcanz√≥ el m√°ximo de ${MAX_INTENTOS} intentos fallidos. Abortando.`);
        // Termina el programa con un c√≥digo de error para indicar que algo sali√≥ mal.
        process.exit(1);
    } else {
        // Si a√∫n no hemos llegado al l√≠mite, preparamos el siguiente intento.
        console.log(`Reintentando en ${DELAY_REINTENTO / 1000} segundos...`);
        // Esperamos el tiempo definido antes de volver a llamar a la funci√≥n 'conectar'.
        setTimeout(conectar, DELAY_REINTENTO);
    }
});

// Evento 'close': Se dispara cuando la conexi√≥n se ha cerrado completamente.
client.on('close', () => {
    console.log(`La conexi√≥n se ha cerrado...`);
})

// --- INICIO DEL PROGRAMA ---
// Se llama a la funci√≥n por primera vez para iniciar el primer intento de conexi√≥n.
conectar();
