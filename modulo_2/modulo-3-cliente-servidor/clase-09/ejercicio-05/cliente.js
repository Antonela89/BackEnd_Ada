// ### üéØ DESAF√çO 5: Cliente con Eventos y Control de Referencias ‚ôªÔ∏è
// **üìå Objetivo:** Aplicar `ref()` y `unref()` para controlar la terminaci√≥n del proceso de Node.js.

// **üî∑ El cliente debe:**
// ‚úÖ Conectarse y enviar un mensaje inicial.
// ‚úÖ Escuchar los eventos `'data'`, `'end'`, `'close'` y `'error'`.
// ‚úÖ Llamar a `client.unref()` a los 10 segundos para permitir que el proceso termine.
// ‚úÖ A los 15 segundos, llamar a `client.ref()` para que el proceso se mantenga activo.
// ‚úÖ Cerrar la conexi√≥n a los 20 segundos.

    
// Importa el m√≥dulo 'net' para poder usar funciones de red TCP.
const net = require('net');

// Guarda el n√∫mero de puerto (5000) en una constante para la conexi√≥n.
const PORT = 5000;

// Crea un cliente y se conecta al puerto especificado.
// La funci√≥n que se pasa como segundo argumento es un atajo que se ejecuta autom√°ticamente cuando el evento 'connect' ocurre.
const client = net.createConnection({ port: PORT }, () => {
    // Muestra un mensaje en la consola confirmando la conexi√≥n.
    console.log(`Conectado al servidor`);
    // Env√≠a un saludo al servidor justo despu√©s de conectarse.
    client.write(`Hola Servidor...`);
});

// Se ejecuta cada vez que se reciben datos desde el servidor.
client.on('data', (data) => {
    // Muestra en la consola los datos recibidos, convirti√©ndolos a texto.
    console.log(`Datos recibidos: ${data.toString()}`);
});

// Se ejecuta cuando el servidor finaliza la conexi√≥n por su lado.
client.on('end', () => {
    console.log(`El servidor ha cerrado la conexi√≥n...`);
})

// Se ejecuta si ocurre un error en la conexi√≥n (ej: no se puede conectar).
client.on('error', (err) => {
    console.error(`Error: ${err.message}`);
})

// Se ejecuta siempre que la conexi√≥n se cierra, ya sea por un error, por el servidor, o por el propio cliente.
client.on('close', () => {
    console.log(`La conexi√≥n se ha cerrado...`);
})

// Despu√©s de 10 segundos, se ejecuta esta funci√≥n.
setTimeout(() => {
    console.log(`Deteniendo proceso...`);
    // 'unref()' le dice al programa: "no me esperes para terminar".
    // Si esta conexi√≥n fuera lo √∫nico que mantiene el programa activo, con 'unref()', el programa podr√≠a cerrarse.
    client.unref();
}, 10000)

// Despu√©s de 15 segundos, se ejecuta esta funci√≥n.
setTimeout(() => {
    console.log(`Activando proceso...`);
    // 'ref()' revierte el efecto de 'unref()'.
    // Le dice al programa que esta conexi√≥n es importante y que debe mantenerse activo mientras la conexi√≥n exista.
    client.ref();
}, 15000)

// Despu√©s de 20 segundos, se ejecuta esta funci√≥n.
setTimeout(() => {
    console.log(`Ha pasado el tiempo de espera`);
    // Cierra la conexi√≥n con el servidor de forma ordenada.
    client.end();
}, 20000);

  